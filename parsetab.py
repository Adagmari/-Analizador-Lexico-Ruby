
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDS ARRAY ASSIGN ASSIGNMIN ASSIGNPLUS BREAK BSLASH CASE CLASS COMENTARIO COMID COMIS COMMA COMPARE DEF DEFINED DIVISION DO ELSE ELSIF END ENSURE EXP FALSE FLOAT FOR GETS GREATER GREQUAL HASH IDCLASS IDENTIFIER IDGLOBAL IDINSTANCE IDLOCAL IF IN LBRACKET LESS LPARENTHESIS LSEQUAL LSQBRACKET MINUS MOD MODULE MULT NEW NEXT NIL NOT NOTEQUAL NOTS NUMBER NUML OR ORS PLUS POINT PRINT PUTC PUTS RBRACKET REDO RESCUE RETURN RPARENTHESIS RSQBRACKET SELF SEMICOLON STRING STRINGV TRUE UNDEF UNTIL WHEN WHILEinstrucciones : expression \n                        | cadena\n                        | arreglo\n                        | string\n                        | hashexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : factorfactor : NUMBER\n              | FLOATfactor : MINUS NUMBER\n              | MINUS FLOATstring : STRINGVcadena : type POINT typecadena : type POINT type LPARENTHESIS string RPARENTHESIScadena : type LPARENTHESIS string RPARENTHESISarreglo : type POINT type LPARENTHESIS factor RPARENTHESISarreglo : type POINT type LPARENTHESIS factor COMMA arraycontent RPARENTHESISarreglo : type LSQBRACKET arraycontent RSQBRACKETarraycontent : factor\n                    | stringarraycontent : factor COMMA arraycontent\n                    | string COMMA arraycontenttype : STRINGtype : ARRAYtype : NEWhash : LBRACKET hashcontent RBRACKEThashcontent : string ASSIGN GREATER hashcontentvaluehashcontent : string ASSIGN GREATER hashcontentvalue COMMA hashcontenthashcontentvalue : factor\n                        | string'
    
_lr_action_items = {'STRINGV':([0,12,23,24,36,39,40,41,51,52,],[11,11,11,11,11,11,11,11,11,11,]),'LBRACKET':([0,],[12,]),'STRING':([0,22,],[13,13,]),'ARRAY':([0,22,],[14,14,]),'NEW':([0,22,],[15,15,]),'NUMBER':([0,8,18,19,24,36,39,40,41,51,],[16,20,16,16,16,16,16,16,16,16,]),'FLOAT':([0,8,18,19,24,36,39,40,41,51,],[17,21,17,17,17,17,17,17,17,17,]),'MINUS':([0,2,7,10,16,17,18,19,20,21,24,27,28,36,39,40,41,51,],[8,19,-8,-9,-10,-11,8,8,-12,-13,8,-6,-7,8,8,8,8,8,]),'$end':([1,2,3,4,5,6,7,10,11,13,14,15,16,17,20,21,27,28,29,34,37,38,49,50,55,],[0,-1,-2,-3,-4,-5,-8,-9,-14,-25,-26,-27,-10,-11,-12,-13,-6,-7,-15,-28,-17,-20,-16,-18,-19,]),'PLUS':([2,7,10,16,17,20,21,27,28,],[18,-8,-9,-10,-11,-12,-13,-6,-7,]),'POINT':([9,13,14,15,],[22,-25,-26,-27,]),'LPARENTHESIS':([9,13,14,15,29,],[23,-25,-26,-27,36,]),'LSQBRACKET':([9,13,14,15,],[24,-25,-26,-27,]),'ASSIGN':([11,26,],[-14,35,]),'RPARENTHESIS':([11,16,17,20,21,30,32,33,42,43,44,45,53,],[-14,-10,-11,-12,-13,37,-21,-22,49,50,-23,-24,55,]),'COMMA':([11,16,17,20,21,32,33,43,46,47,48,],[-14,-10,-11,-12,-13,39,40,51,-32,52,-31,]),'RSQBRACKET':([11,16,17,20,21,31,32,33,44,45,],[-14,-10,-11,-12,-13,38,-21,-22,-23,-24,]),'RBRACKET':([11,16,17,20,21,25,46,47,48,54,],[-14,-10,-11,-12,-13,34,-32,-29,-31,-30,]),'GREATER':([35,],[41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'expression':([0,],[2,]),'cadena':([0,],[3,]),'arreglo':([0,],[4,]),'string':([0,12,23,24,36,39,40,41,51,52,],[5,26,30,33,42,33,33,46,33,26,]),'hash':([0,],[6,]),'term':([0,18,19,],[7,27,28,]),'type':([0,22,],[9,29,]),'factor':([0,18,19,24,36,39,40,41,51,],[10,10,10,32,43,32,32,48,32,]),'hashcontent':([12,52,],[25,54,]),'arraycontent':([24,39,40,51,],[31,44,45,53,]),'hashcontentvalue':([41,],[47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> expression','instrucciones',1,'p_instrucciones','sintactic.py',5),
  ('instrucciones -> cadena','instrucciones',1,'p_instrucciones','sintactic.py',6),
  ('instrucciones -> arreglo','instrucciones',1,'p_instrucciones','sintactic.py',7),
  ('instrucciones -> string','instrucciones',1,'p_instrucciones','sintactic.py',8),
  ('instrucciones -> hash','instrucciones',1,'p_instrucciones','sintactic.py',9),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','sintactic.py',13),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','sintactic.py',17),
  ('expression -> term','expression',1,'p_expression_term','sintactic.py',21),
  ('term -> factor','term',1,'p_term_factor','sintactic.py',25),
  ('factor -> NUMBER','factor',1,'p_factor_num','sintactic.py',29),
  ('factor -> FLOAT','factor',1,'p_factor_num','sintactic.py',30),
  ('factor -> MINUS NUMBER','factor',2,'p_factor_numnegative','sintactic.py',34),
  ('factor -> MINUS FLOAT','factor',2,'p_factor_numnegative','sintactic.py',35),
  ('string -> STRINGV','string',1,'p_string_str','sintactic.py',42),
  ('cadena -> type POINT type','cadena',3,'p_cadena_forma1','sintactic.py',46),
  ('cadena -> type POINT type LPARENTHESIS string RPARENTHESIS','cadena',6,'p_cadena_forma2','sintactic.py',50),
  ('cadena -> type LPARENTHESIS string RPARENTHESIS','cadena',4,'p_cadena_forma3','sintactic.py',54),
  ('arreglo -> type POINT type LPARENTHESIS factor RPARENTHESIS','arreglo',6,'p_arreglo_tipo1','sintactic.py',61),
  ('arreglo -> type POINT type LPARENTHESIS factor COMMA arraycontent RPARENTHESIS','arreglo',8,'p_arreglo_tipo2','sintactic.py',65),
  ('arreglo -> type LSQBRACKET arraycontent RSQBRACKET','arreglo',4,'p_arreglo_tipo3','sintactic.py',69),
  ('arraycontent -> factor','arraycontent',1,'p_arraycontent_var1','sintactic.py',74),
  ('arraycontent -> string','arraycontent',1,'p_arraycontent_var1','sintactic.py',75),
  ('arraycontent -> factor COMMA arraycontent','arraycontent',3,'p_arraycontent_var2','sintactic.py',79),
  ('arraycontent -> string COMMA arraycontent','arraycontent',3,'p_arraycontent_var2','sintactic.py',80),
  ('type -> STRING','type',1,'p_type_String','sintactic.py',84),
  ('type -> ARRAY','type',1,'p_type_Array','sintactic.py',88),
  ('type -> NEW','type',1,'p_type_new','sintactic.py',92),
  ('hash -> LBRACKET hashcontent RBRACKET','hash',3,'p_hash_tipo1','sintactic.py',96),
  ('hashcontent -> string ASSIGN GREATER hashcontentvalue','hashcontent',4,'p_hashcontent_var1','sintactic.py',100),
  ('hashcontent -> string ASSIGN GREATER hashcontentvalue COMMA hashcontent','hashcontent',6,'p_hashcontent_var2','sintactic.py',104),
  ('hashcontentvalue -> factor','hashcontentvalue',1,'p_hashcontentvalue_var','sintactic.py',108),
  ('hashcontentvalue -> string','hashcontentvalue',1,'p_hashcontentvalue_var','sintactic.py',109),
]
