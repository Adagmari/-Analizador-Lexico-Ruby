
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDS ARRAY ASSIGN ASSIGNMIN ASSIGNPLUS BREAK BSLASH CASE CLASS COMENTARIO COMID COMIS COMMA COMPARE DEF DEFINED DIVISION DO ELSE ELSIF EMPTY END ENSURE EXP FALSE FLOAT FOR GETS GREATER GREQUAL HASH IDCLASS IDENTIFIER IDGLOBAL IDINSTANCE IDLOCAL IF IN INDEX INTERROGATIVE LBRACKET LENGTH LESS LPARENTHESIS LSEQUAL LSQBRACKET MINUS MOD MODULE MULT NEW NEXT NIL NOT NOTEQUAL NOTS NUMBER NUML OR ORS PLUS POINT PRINT PUTC PUTS RBRACKET REDO RESCUE RETURN RPARENTHESIS RSQBRACKET SELF SEMICOLON STRING STRINGV TRUE UNDEF UNTIL WHEN WHILEinstrucciones : expression \n                        | string\n                        | cadena\n                        | metodocadena\n                        | arreglo\n                        | metodosarreglo\n                        | hash\n                        | estructurasControl\n                        | boolean \n                        | oputs \n                        | putss\n                        | putsenx \n                        | sentenIF boolean :  TRUE \n                | FALSE\n                | NIL oputs : PUTS   putss : PUTS string\n              | PUTS cadena\n              | PRINT string\n              | PRINT cadena\n             putsenx : PUTS expression\n                | PRINT expression sentenIF : IF comparador term  comparador : COMPARE\n                   | GREQUAL \n                   | LSEQUAL\n                   | NOTEQUAL\n                   | LESS\n                   | GREATER expression : expression PLUS termexpression : expression MINUS termexpression : termterm : factorfactor : NUMBER\n              | FLOATfactor : MINUS NUMBER\n              | MINUS FLOATstring : STRINGVcadena : STRING POINT NEWcadena : STRING POINT NEW LPARENTHESIS string RPARENTHESIScadena : STRING LPARENTHESIS string RPARENTHESISmetodocadena : cadena POINT EMPTY INTERROGATIVE\n                    | string POINT EMPTY INTERROGATIVEmetodocadena : cadena POINT LENGTH\n                    | string POINT LENGTHarreglo : ARRAY POINT NEWarreglo : ARRAY POINT NEW LPARENTHESIS factor RPARENTHESISarreglo : ARRAY POINT NEW LPARENTHESIS factor COMMA arraycontent RPARENTHESISarreglo : ARRAY LSQBRACKET arraycontent RSQBRACKETarreglo : LSQBRACKET arraycontent RSQBRACKETarraycontent : factor\n                    | stringarraycontent : factor COMMA arraycontent\n                    | string COMMA arraycontentmetodosarreglo : arreglo POINT INDEX LPARENTHESIS arraycontent RPARENTHESISmetodosarreglo : arreglo LSQBRACKET factor RSQBRACKEThash : LBRACKET hashcontent RBRACKEThash : HASH POINT NEWhashcontent : string ASSIGN GREATER hashcontentvaluehashcontent : string ASSIGN GREATER hashcontentvalue COMMA hashcontenthashcontentvalue : factor\n                        | stringestructurasControl : FOR factor IN factor POINT POINT factor DO BREAK IF ENDestructurasControl : FOR factor IN factor POINT POINT factor DO END'
    
_lr_action_items = {'STRINGV':([0,21,22,29,30,42,44,78,79,87,89,95,107,108,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'STRING':([0,29,30,],[18,18,18,]),'ARRAY':([0,],[19,]),'LSQBRACKET':([0,6,19,75,77,92,106,113,],[21,38,44,-47,-51,-50,-48,-49,]),'LBRACKET':([0,],[22,]),'HASH':([0,],[23,]),'FOR':([0,],[24,]),'TRUE':([0,],[26,]),'FALSE':([0,],[27,]),'NIL':([0,],[28,]),'PUTS':([0,],[29,]),'PRINT':([0,],[30,]),'IF':([0,115,],[25,117,]),'NUMBER':([0,16,21,24,29,30,33,34,38,44,52,53,54,55,56,57,58,78,79,83,87,91,95,107,109,],[31,39,31,31,31,31,31,31,31,31,31,-25,-26,-27,-28,-29,-30,31,31,31,31,31,31,31,31,]),'FLOAT':([0,16,21,24,29,30,33,34,38,44,52,53,54,55,56,57,58,78,79,83,87,91,95,107,109,],[32,40,32,32,32,32,32,32,32,32,32,-25,-26,-27,-28,-29,-30,32,32,32,32,32,32,32,32,]),'MINUS':([0,2,15,20,21,24,29,30,31,32,33,34,38,39,40,44,52,53,54,55,56,57,58,61,64,65,66,78,79,83,87,91,95,107,109,],[16,34,-33,-34,16,16,16,16,-35,-36,16,16,16,-37,-38,16,16,-25,-26,-27,-28,-29,-30,34,34,-31,-32,16,16,16,16,16,16,16,16,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,20,26,27,28,29,31,32,39,40,59,60,61,62,63,64,65,66,68,70,73,75,77,80,82,84,85,86,88,90,92,104,105,106,113,116,118,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-33,-39,-34,-14,-15,-16,-17,-35,-36,-37,-38,-18,-19,-22,-20,-21,-23,-31,-32,-46,-45,-40,-47,-51,-58,-59,-24,-44,-43,-57,-42,-50,-56,-41,-48,-49,-65,-64,]),'PLUS':([2,15,20,31,32,39,40,61,64,65,66,],[33,-33,-34,-35,-36,-37,-38,33,33,-31,-32,]),'POINT':([3,4,6,17,18,19,23,31,32,39,40,73,75,77,90,92,96,103,105,106,113,],[35,36,37,-39,41,43,50,-35,-36,-37,-38,-40,-47,-51,-42,-50,103,109,-41,-48,-49,]),'COMMA':([17,31,32,39,40,46,47,99,100,101,102,],[-39,-35,-36,-37,-38,78,79,107,-63,108,-62,]),'RSQBRACKET':([17,31,32,39,40,45,46,47,72,76,93,94,],[-39,-35,-36,-37,-38,77,-52,-53,88,92,-54,-55,]),'ASSIGN':([17,49,],[-39,81,]),'RPARENTHESIS':([17,31,32,39,40,46,47,74,93,94,97,98,99,110,],[-39,-35,-36,-37,-38,-52,-53,90,-54,-55,104,105,106,113,]),'RBRACKET':([17,31,32,39,40,48,100,101,102,111,],[-39,-35,-36,-37,-38,80,-63,-60,-62,-61,]),'LPARENTHESIS':([18,71,73,75,],[42,87,89,91,]),'COMPARE':([25,],[53,]),'GREQUAL':([25,],[54,]),'LSEQUAL':([25,],[55,]),'NOTEQUAL':([25,],[56,]),'LESS':([25,],[57,]),'GREATER':([25,81,],[58,95,]),'IN':([31,32,39,40,51,],[-35,-36,-37,-38,83,]),'DO':([31,32,39,40,112,],[-35,-36,-37,-38,114,]),'EMPTY':([35,36,],[67,69,]),'LENGTH':([35,36,],[68,70,]),'INDEX':([37,],[71,]),'NEW':([41,43,50,],[73,75,82,]),'INTERROGATIVE':([67,69,],[85,86,]),'BREAK':([114,],[115,]),'END':([114,117,],[116,118,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'expression':([0,29,30,],[2,61,64,]),'string':([0,21,22,29,30,42,44,78,79,87,89,95,107,108,],[3,47,49,59,62,74,47,47,47,47,98,100,47,49,]),'cadena':([0,29,30,],[4,60,63,]),'metodocadena':([0,],[5,]),'arreglo':([0,],[6,]),'metodosarreglo':([0,],[7,]),'hash':([0,],[8,]),'estructurasControl':([0,],[9,]),'boolean':([0,],[10,]),'oputs':([0,],[11,]),'putss':([0,],[12,]),'putsenx':([0,],[13,]),'sentenIF':([0,],[14,]),'term':([0,29,30,33,34,52,],[15,15,15,65,66,84,]),'factor':([0,21,24,29,30,33,34,38,44,52,78,79,83,87,91,95,107,109,],[20,46,51,20,20,20,20,72,46,20,46,46,96,46,99,102,46,112,]),'arraycontent':([21,44,78,79,87,107,],[45,76,93,94,97,110,]),'hashcontent':([22,108,],[48,111,]),'comparador':([25,],[52,]),'hashcontentvalue':([95,],[101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> expression','instrucciones',1,'p_instrucciones','sintactic.py',7),
  ('instrucciones -> string','instrucciones',1,'p_instrucciones','sintactic.py',8),
  ('instrucciones -> cadena','instrucciones',1,'p_instrucciones','sintactic.py',9),
  ('instrucciones -> metodocadena','instrucciones',1,'p_instrucciones','sintactic.py',10),
  ('instrucciones -> arreglo','instrucciones',1,'p_instrucciones','sintactic.py',11),
  ('instrucciones -> metodosarreglo','instrucciones',1,'p_instrucciones','sintactic.py',12),
  ('instrucciones -> hash','instrucciones',1,'p_instrucciones','sintactic.py',13),
  ('instrucciones -> estructurasControl','instrucciones',1,'p_instrucciones','sintactic.py',14),
  ('instrucciones -> boolean','instrucciones',1,'p_instrucciones','sintactic.py',15),
  ('instrucciones -> oputs','instrucciones',1,'p_instrucciones','sintactic.py',16),
  ('instrucciones -> putss','instrucciones',1,'p_instrucciones','sintactic.py',17),
  ('instrucciones -> putsenx','instrucciones',1,'p_instrucciones','sintactic.py',18),
  ('instrucciones -> sentenIF','instrucciones',1,'p_instrucciones','sintactic.py',19),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactic.py',25),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactic.py',26),
  ('boolean -> NIL','boolean',1,'p_boolean','sintactic.py',27),
  ('oputs -> PUTS','oputs',1,'p_oputs','sintactic.py',33),
  ('putss -> PUTS string','putss',2,'p_puts_String','sintactic.py',37),
  ('putss -> PUTS cadena','putss',2,'p_puts_String','sintactic.py',38),
  ('putss -> PRINT string','putss',2,'p_puts_String','sintactic.py',39),
  ('putss -> PRINT cadena','putss',2,'p_puts_String','sintactic.py',40),
  ('putsenx -> PUTS expression','putsenx',2,'p_puts_expression','sintactic.py',49),
  ('putsenx -> PRINT expression','putsenx',2,'p_puts_expression','sintactic.py',50),
  ('sentenIF -> IF comparador term','sentenIF',3,'p_if','sintactic.py',58),
  ('comparador -> COMPARE','comparador',1,'p_comparador','sintactic.py',62),
  ('comparador -> GREQUAL','comparador',1,'p_comparador','sintactic.py',63),
  ('comparador -> LSEQUAL','comparador',1,'p_comparador','sintactic.py',64),
  ('comparador -> NOTEQUAL','comparador',1,'p_comparador','sintactic.py',65),
  ('comparador -> LESS','comparador',1,'p_comparador','sintactic.py',66),
  ('comparador -> GREATER','comparador',1,'p_comparador','sintactic.py',67),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','sintactic.py',76),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','sintactic.py',80),
  ('expression -> term','expression',1,'p_expression_term','sintactic.py',84),
  ('term -> factor','term',1,'p_term_factor','sintactic.py',88),
  ('factor -> NUMBER','factor',1,'p_factor_num','sintactic.py',92),
  ('factor -> FLOAT','factor',1,'p_factor_num','sintactic.py',93),
  ('factor -> MINUS NUMBER','factor',2,'p_factor_numnegative','sintactic.py',97),
  ('factor -> MINUS FLOAT','factor',2,'p_factor_numnegative','sintactic.py',98),
  ('string -> STRINGV','string',1,'p_string_str','sintactic.py',104),
  ('cadena -> STRING POINT NEW','cadena',3,'p_cadena_forma1','sintactic.py',108),
  ('cadena -> STRING POINT NEW LPARENTHESIS string RPARENTHESIS','cadena',6,'p_cadena_forma2','sintactic.py',112),
  ('cadena -> STRING LPARENTHESIS string RPARENTHESIS','cadena',4,'p_cadena_forma3','sintactic.py',116),
  ('metodocadena -> cadena POINT EMPTY INTERROGATIVE','metodocadena',4,'p_metodocadena_empty','sintactic.py',123),
  ('metodocadena -> string POINT EMPTY INTERROGATIVE','metodocadena',4,'p_metodocadena_empty','sintactic.py',124),
  ('metodocadena -> cadena POINT LENGTH','metodocadena',3,'p_metodocadena_length','sintactic.py',128),
  ('metodocadena -> string POINT LENGTH','metodocadena',3,'p_metodocadena_length','sintactic.py',129),
  ('arreglo -> ARRAY POINT NEW','arreglo',3,'p_arreglo_tipo4','sintactic.py',136),
  ('arreglo -> ARRAY POINT NEW LPARENTHESIS factor RPARENTHESIS','arreglo',6,'p_arreglo_tipo1','sintactic.py',140),
  ('arreglo -> ARRAY POINT NEW LPARENTHESIS factor COMMA arraycontent RPARENTHESIS','arreglo',8,'p_arreglo_tipo2','sintactic.py',144),
  ('arreglo -> ARRAY LSQBRACKET arraycontent RSQBRACKET','arreglo',4,'p_arreglo_tipo3','sintactic.py',148),
  ('arreglo -> LSQBRACKET arraycontent RSQBRACKET','arreglo',3,'p_arreglo_tipo5','sintactic.py',152),
  ('arraycontent -> factor','arraycontent',1,'p_arraycontent_var1','sintactic.py',156),
  ('arraycontent -> string','arraycontent',1,'p_arraycontent_var1','sintactic.py',157),
  ('arraycontent -> factor COMMA arraycontent','arraycontent',3,'p_arraycontent_var2','sintactic.py',161),
  ('arraycontent -> string COMMA arraycontent','arraycontent',3,'p_arraycontent_var2','sintactic.py',162),
  ('metodosarreglo -> arreglo POINT INDEX LPARENTHESIS arraycontent RPARENTHESIS','metodosarreglo',6,'p_metodosarreglo_index','sintactic.py',168),
  ('metodosarreglo -> arreglo LSQBRACKET factor RSQBRACKET','metodosarreglo',4,'p_metodosarreglo_num','sintactic.py',172),
  ('hash -> LBRACKET hashcontent RBRACKET','hash',3,'p_hash_tipo1','sintactic.py',178),
  ('hash -> HASH POINT NEW','hash',3,'p_hash_tipo2','sintactic.py',182),
  ('hashcontent -> string ASSIGN GREATER hashcontentvalue','hashcontent',4,'p_hashcontent_var1','sintactic.py',186),
  ('hashcontent -> string ASSIGN GREATER hashcontentvalue COMMA hashcontent','hashcontent',6,'p_hashcontent_var2','sintactic.py',190),
  ('hashcontentvalue -> factor','hashcontentvalue',1,'p_hashcontentvalue_var','sintactic.py',194),
  ('hashcontentvalue -> string','hashcontentvalue',1,'p_hashcontentvalue_var','sintactic.py',195),
  ('estructurasControl -> FOR factor IN factor POINT POINT factor DO BREAK IF END','estructurasControl',11,'p_estructurasControl_for1','sintactic.py',207),
  ('estructurasControl -> FOR factor IN factor POINT POINT factor DO END','estructurasControl',9,'p_estructurasControl_for2','sintactic.py',211),
]
